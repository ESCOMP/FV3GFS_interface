#!/usr/bin/env python

"""
build fv3gfs library
"""
import sys, os, time, filecmp, shutil, imp, glob

_CIMEROOT = os.environ.get("CIMEROOT")
if _CIMEROOT is None:
    raise SystemExit("ERROR: must set CIMEROOT environment variable")

_LIBDIR = os.path.join(_CIMEROOT, "scripts", "Tools")
sys.path.append(_LIBDIR)

from standard_script_setup import *
from CIME.buildlib import parse_input
from CIME.case import Case
from CIME.utils import run_cmd, expect, safe_copy
from CIME.build import get_standard_makefile_args

logger = logging.getLogger(__name__)

###############################################################################
def buildlib(caseroot, libroot, bldroot, clean = False):
###############################################################################

    with Case(caseroot) as case:
        # retrieve variables
        srcroot = case.get_value("SRCROOT")
        compiler = case.get_value("COMPILER")
        debug = case.get_value("DEBUG") #__DEBUG__ Y/N
        openmp = case.get_value("BUILD_THREADED") #__OPENMP__ Y/N
        ccpp = case.get_value("BUILD_CCPP") #__CCPP__ Y/N
        ccpp_suits = case.get_value("FFLAGS")

        # create configure file under src/model/conf       
        conf_dir = os.path.join(srcroot,"src","model","conf") 
        opt_dict = {
            "__MACROS_MAKE_CIME__" : os.path.join(caseroot,"Macros.make"),
            "__DEBUG__"            : "Y" if debug else "N",
            "__OPENMP__"           : "Y" if openmp else "N",
            "__CCPP__"             : "Y" if ccpp else "N"
        }
        finp = open(os.path.join(srcroot,"src","model","FV3","cime","cime_config","configure.fv3"))
        platform = "linux.{}".format(compiler)
        cstr = "configure.fv3.{}".format(platform)
        if os.path.exists(os.path.join(conf_dir,cstr)):
            os.remove(os.path.join(conf_dir,cstr))
        with open(os.path.join(conf_dir,cstr), 'w') as fout:
            for s in finp.xreadlines():
                found = False
                for key in opt_dict:
                    if key in s:
                        fout.write(s.replace(key, opt_dict.get(key)))
                        found = True
                if not found:
                    fout.write(s)

        # create module file under src/model/modulefiles/cime
        module_dir = os.path.join(srcroot,"src","model","modulefiles",platform) 
        if not os.path.exists(module_dir): 
            os.makedirs(module_dir)
        if os.path.exists(os.path.join(module_dir,"fv3")):
            os.remove(os.path.join(module_dir,"fv3"))
        os.symlink(os.path.join(caseroot,".env_mach_specific.sh"), os.path.join(module_dir,"fv3"))

        # TODO: this needs to be configurable and available suits are in ufs-mrweather-app/src/model/FV3/ccpp/suites/
        suites = "FV3_GFS_v15,FV3_CPT_v0"

        # build model
        os.chdir(os.path.join(srcroot,"src","model","tests"))
        #cmd = "./compile.sh {} {} 'CCPP={} STATIC=Y SUITES={}' release NO NO".format(os.path.join(srcroot,"src","model","FV3"),platform,"Y" if ccpp else "N",suites)
        cmd = "./compile.sh {} {} 'CCPP={} STATIC=Y SUITES={}' release".format(os.path.join(srcroot,"src","model","FV3"),platform,"Y" if ccpp else "N",suites)
        rc, out, err = run_cmd(cmd)
        logger.info("%s: \n\n output:\n %s \n\n err:\n\n%s\n"%(cmd,out,err))
        expect(rc == 0, "Command %s failed with rc=%s" % (cmd, rc))

def _main_func():
    caseroot, libroot, bldroot = parse_input(sys.argv)
    buildlib(caseroot, libroot, bldroot)

###############################################################################

if __name__ == "__main__":
    _main_func()
