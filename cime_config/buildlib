#!/usr/bin/env python

"""
build ufsatm library
"""
import sys, os

_CIMEROOT = os.environ.get("CIMEROOT")
if _CIMEROOT is None:
    raise SystemExit("ERROR: must set CIMEROOT environment variable")

_LIBDIR = os.path.join(_CIMEROOT, "scripts", "Tools")
sys.path.append(_LIBDIR)

from standard_script_setup import *
from CIME.buildlib import parse_input
from CIME.case import Case
from CIME.utils import run_cmd, expect, safe_copy, symlink_force
from CIME.build import get_standard_makefile_args
from CIME.XML.compilers import Compilers
from CIME.XML.machines import Machines
import six

logger = logging.getLogger(__name__)

def _build_ccpp_cmake_files(ccpp_blddir, ccpp_srcmods):
    """
    Set env variables CCPP_SCHEMES and CCPP_CAPS to the full path list of files to be compiled.
    Check the case SourceMods/src.ufsatm for files and update the env variables if required.
    """
    needs_update = False
    for ccppfile in ("SCHEMES","CAPS"):
        ccpp_srcfiles = []
        current_settings_fname = os.path.join(ccpp_blddir,"cime_cmake_{}.txt".format(ccppfile))
        current_settings = None
        if os.path.isfile(current_settings_fname):
            with open(current_settings_fname,"r") as fcs:
                current_settings = fcs.read()

        with open(os.path.join(ccpp_blddir,"physics","CCPP_{}.cmake").format(ccppfile)) as fd:
            env_var = "CCPP_{}".format(ccppfile)
            for line in fd:
                line = line.strip()
                if os.path.isfile(line):
                    tfile = os.path.basename(line)
                    if os.path.isfile(os.path.join(ccpp_srcmods,tfile)):
                        line = os.path.join(ccpp_srcmods,tfile)
                    ccpp_srcfiles.append(line)
        os.environ[env_var] = ";".join(ccpp_srcfiles)
        if not current_settings or current_settings != os.environ[env_var]:
            needs_update = True
            with open(current_settings_fname,"w") as fw:
                fw.write(os.environ[env_var])

    return needs_update

def _create_dir_structure(srcdir,targetdir, sourcemods=None):
    """
    Reproduce the directory structure of srcdir in targetdir with
    links to the files of srcdir.  If a sourcemods dir is provided and
    a file in the source tree matchs a file in the sourcemods directory
    link the sourcemods file instead
    """
    structure_updated = False
    for dirpath, _, filenames in os.walk(srcdir):
        structure = targetdir + dirpath[len(srcdir):]
        if not os.path.isdir(structure):
            os.mkdir(structure)
        for fname in filenames:
            # ignore some files
            if fname.startswith('.') or fname.startswith('#') or fname.startswith('~'):
                continue
            newfullpath = os.path.join(structure,fname)
            if sourcemods and os.path.isfile(os.path.join(sourcemods,fname)):
                # If file exists in case sourcemods use it
                linkto = os.path.join(sourcemods,fname)
            else:
                # otherwise link original file
                linkto = os.path.join(dirpath,fname)

            # Broken link or link to wrong path - remove it
            if (os.path.lexists(newfullpath) and not os.path.exists(newfullpath)) or \
               (os.path.exists(newfullpath) and not os.path.samefile(linkto,newfullpath)):
                os.unlink(newfullpath)
            # Create new link
            if not os.path.exists(newfullpath):
                os.symlink(linkto, newfullpath)
                structure_updated = True
    return structure_updated

def get_compiler_names(case):
    machobj = Machines(machine=case.get_value("MACH"))
    compobj = Compilers(machobj)
    ccomp = compobj.get_value("MPICC")
    cxxcomp = compobj.get_value("MPICXX")
    fcomp = compobj.get_value("MPIFC")

    return ccomp, cxxcomp, fcomp

###############################################################################
#pylint: disable=unused-argument
def buildlib(caseroot, libroot, bldroot):
###############################################################################

    with Case(caseroot) as case:
        # retrieve variables
        srcroot = case.get_value("SRCROOT")
        compset = case.get_value("COMPSET")
        comp_root_dir_atm = case.get_value("COMP_ROOT_DIR_ATM")
        srcdir = os.path.join(srcroot,"src","model")
        os.environ["CASEROOT"] = caseroot

        structure_updated = _create_dir_structure(srcdir,bldroot,
                               sourcemods=os.path.join(caseroot,"SourceMods","src.ufsatm"))

        #Now build ccpp if needed
        ccpp = case.get_value("BUILD_CCPP")
        mode32bit = case.get_value("BUILD_32BIT")
        gmake = case.get_value("GMAKE")
        gmake_j = case.get_value("GMAKE_J")
        debug = case.get_value("DEBUG")
        cmake_flags = " -DCOMPILER={} ".format(case.get_value("COMPILER"))
        cmake_flags += " -DMPILIB={} ".format(case.get_value("MPILIB"))
        if debug:
            cmake_flags += " -DDEBUG=TRUE "
            cmake_flags += " -DCMAKE_BUILD_TYPE=Debug "
        else:
            cmake_flags += " -DDEBUG=FALSE "

        if not debug and case.get_value("TEST"):
            if "PFS" not in case.get_value("TESTCASE"):
                cmake_flags += " -DREPRO=ON "
                cmake_flags += " -DCMAKE_BUILD_TYPE=Bitforbit "
        comp_classes = case.get_values("COMP_CLASSES")
        if ccpp:
            ccpp_srcroot = os.path.join(comp_root_dir_atm,"ccpp")
            ccpp_srcmods = os.path.join(caseroot,"SourceMods","src.ufsatm")
            ccpp_suites = case.get_value("CCPP_SUITES")
            # fix for UFS MR-Weather App
            components = compset.split("_")[1:]
            components = [ x for x in components if "S" not in x[0] ]
            if os.path.isfile(os.path.join(ccpp_srcroot,"suites","suite_{}_no_nsst.xml".format(ccpp_suites))) and len(components) < 2:
                ccpp_suites += ","+ccpp_suites+"_no_nsst"
            ccpp_blddir=os.path.join(bldroot,"FV3","ccpp")
            if not os.path.exists(os.path.join(ccpp_blddir,"cime_cmake_CAPS.txt")):
                ccpp_preconfig = os.path.join(ccpp_srcroot,"framework","scripts","ccpp_prebuild.py")
                ccpp_config = os.path.join(ccpp_srcroot,"config","ccpp_prebuild_config.py")
                ccpp_options = "--config {} --suites={} --builddir {}".format(ccpp_config, ccpp_suites, os.path.join(bldroot,"FV3"))
                print("HERE comp_classes {}".format(comp_classes))
                # TODO: do not compile HAFS app with --static, it is not supported yet
                # this needs to be removed once UFSATM under HAFS is updated
                if len(comp_classes) < 3 and "HAFS" not in ccpp_suites:
                    ccpp_options += " --static"
                stat, _, err = run_cmd("{} {}".format(ccpp_preconfig, ccpp_options),
                                       verbose=True,
                                       from_dir=srcdir)
                expect(stat==0,"ccpp_preconfig error from fv3 {}".format(err))
                _build_ccpp_cmake_files(ccpp_blddir,ccpp_srcmods)


            cmake_flags += " -DCCPP=ON -DSUITES={} ".format(ccpp_suites)

        cmake_flags += " -DMPI=ON "
        cmake_flags += " -DSTATIC=ON "
        if mode32bit:
            cmake_flags += " -D32BIT=ON "

        if case.get_value("BUILD_THREADED") or case.get_value("FORCE_BUILD_SMP") or case.get_value("SMP_PRESENT"):
            cmake_flags += " -DOPENMP=ON -Dcompile_threaded=TRUE "
        else:
            cmake_flags += " -DOPENMP=OFF "

        mklroot = os.environ.get("MKLROOT")
        if mklroot:
            cmake_flags += " -DMKL_DIR={}".format(mklroot)
        for name in ("NETCDF", "NETCDF_DIR", "NETCDF_PATH", "TACC_NETCDF_DIR", "NETCDFROOT"):
            netcdf = os.environ.get(name)
            if netcdf:
                cmake_flags += " -DNETCDF_DIR={} ".format(netcdf)
                break
        if not netcdf:
            # one last try
            from distutils.spawn import find_executable
            netcdf = find_executable("ncdump")
            if netcdf:
                if six.PY3:
                    netcdf = os.path.dirname(netcdf).parent
                else:
                    netcdf = os.path.abspath(os.path.join(netcdf, os.pardir))
                cmake_flags += " -DNETCDF_DIR={} ".format(netcdf)
        # This is the variable expected in configure_cime.cmake
        os.environ["NETCDF"] = netcdf
        if structure_updated or not os.path.exists(os.path.join(bldroot,"CMakeFiles")):
            cmake_flags += " -C {}".format(os.path.join(bldroot,"cmake","configure_cime.cmake"))
            ccomp, cxxcomp, fcomp = get_compiler_names(case)
            print "CCOMP is >{}<".format(ccomp)
            os.environ["CMAKE_C_COMPILER"]=ccomp.strip()
            os.environ["CMAKE_CXX_COMPILER"]=cxxcomp.strip()
            os.environ["CMAKE_Fortran_COMPILER"]=fcomp.strip()
            os.environ["CMAKE_Platform"]="cime"
            safe_copy(os.path.join(comp_root_dir_atm,"cime","cime_config","configure_cime.cmake"),
                      os.path.join(bldroot,"cmake"))

            logger.info("Calling cmake {} {}".format(cmake_flags, bldroot))
            stat, _, err = run_cmd("cmake {} {} ".format(cmake_flags,bldroot),from_dir=bldroot,verbose=True)
            expect(stat==0,"CMAKE error from fv3 {}".format(err))
        gmake_args = "-j {} ".format(gmake_j)+get_standard_makefile_args(case)
        gmake_args += " VERBOSE=1 "
        stat, _, err = run_cmd("{} {}".format(gmake,gmake_args),from_dir=bldroot,verbose=True)
        expect(stat==0,"Build error from fv3 {}".format(err))

        if os.path.exists(os.path.join(bldroot,"FMS","libfms.a")):
            safe_copy(os.path.join(bldroot,"FMS","libfms.a"), libroot)

        # This step is needed for CIME build
        if "CPL" in comp_classes:
            nuopc_cap_src = os.path.join(bldroot,"FV3","cime","cime_config","cpl")
            filepath_file = os.path.join(nuopc_cap_src,"Filepath")

            if not os.path.exists(filepath_file):
                with open(filepath_file, "w") as fp:
                    fp.write(os.path.join(caseroot,"SourceMods","src.ufsatm"))
                    fp.write(os.path.join(nuopc_cap_src))
            complib = os.path.join(libroot,"libatm.a")
            makefile = os.path.join(case.get_value("CASETOOLS"),"Makefile")

            cmd = "{} complib -j {} MODEL=ufsatm COMPLIB={} -f {} {} USER_INCLDIR=-I{} " \
                .format(gmake, gmake_j, complib, makefile, get_standard_makefile_args(case), os.path.join(bldroot,"FV3","mod"))

            rc, out, err = run_cmd(cmd, from_dir=nuopc_cap_src )
            expect(rc == 0, "Command %s failed rc=%d\nout=%s\nerr=%s" % (cmd, rc, out, err))
            safe_copy(os.path.join(nuopc_cap_src,"atm_comp_nuopc.mod"),os.path.join(libroot,"include"))

def _main_func():
    caseroot, libroot, bldroot = parse_input(sys.argv)
    buildlib(caseroot, libroot, bldroot)

###############################################################################

if __name__ == "__main__":
    _main_func()
