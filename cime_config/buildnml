#!/usr/bin/env python

"""FV3GFS namelist creator
"""

# Typically ignore this.
# pylint: disable=invalid-name

# Disable these because this is our standard setup
# pylint: disable=wildcard-import,unused-wildcard-import,wrong-import-position

import os, shutil, sys, glob, stat, filecmp, imp

CIMEROOT = os.environ.get("CIMEROOT")
if CIMEROOT is None:
    raise SystemExit("ERROR: must set CIMEROOT environment variable")
sys.path.append(os.path.join(CIMEROOT, "scripts", "Tools"))

from standard_script_setup import *
from CIME.case import Case
from CIME.nmlgen import NamelistGenerator
from CIME.utils import expect
from CIME.buildnml import create_namelist_infile, parse_input
from CIME.utils import run_cmd

logger = logging.getLogger(__name__)

# prepares the input files of a case and places in rundir:
def prep_input(case):
    casename        = case.get_value("CASE")
    Buildconf       = case.get_value("CASEBUILD")
    rundir          = case.get_value("RUNDIR")
    atm_grid        = case.get_value("ATM_GRID")
    testcase        = case.get_value("TEST")

# This section below is how input files 
# are copied in NEMS and is just for reference
#
#     # Specify input files.
#     filters input {
#       #    WORK FILE           <=filter=     SOURCE FILE
#           'input.nml'          <=atparse=  " @[PARMnems]/input.mom6.nml.IN"
#     'model_configure'          <=atparse=  " @[PARMnems]/model_configure.IN"
#         'aerosol.dat'          <=copyfrom= " @[FV3_input_data]/INPUT"
#   'co2historicaldata_201*.txt' <=copyfrom= " @[FV3_input_data]/INPUT"
#   'global_o3prdlos.f77'        <=copyfrom= " @[FV3_input_data]/INPUT"
#       'sfc_emissivity_idx.txt' <=copyfrom= " @[FV3_input_data]/INPUT"
#    'solarconstant_noaa_an.txt' <=copyfrom= " @[FV3_input_data]/INPUT"
#                '*grb'          <=copyfrom= " @[FV3_input_data]"
#             '*_table'          <=copyfrom= " @[FV3_input_data]"
#          '*configure'          <=copyfrom= " @[FV3_input_data]"
#               'INPUT'          <=copy=     " @[FV3_input_data]/INPUT"
# 'INPUT/C96_mosaic.nc'          <=copy=     " @[FV3_input_data]/INPUT/grid_spec.nc"
#      'nems.configure'          <=atparse=  " @[PARMnems]/nems.configure.@[nems_configure].IN"
#             'INPUT/*'          <=copyfrom= " @[UGCS_input_data]/MOM6_FIX_025deg"
#  'INPUT/MOM6_IC_TS.nc'         <=copy=    "  @[UGCS_input_data]/MOM6_IC/MOM6_IC_TS.nc"
#                   '*'          <=copyfrom= " @[UGCS_input_data]/CICE"
#                   '*'          <=copyfrom= " @[UGCS_input_data]/MEDIATOR_atm_flux"
#  'INPUT/grid_spec.nc'          <=copy=    "  @[UGCS_input_data]/COUPLED/grid_spec.nc"
#          'diag_table'          <=copy=    "  @[UGCS_input_data]/COUPLED/diag_table"
#     }

    # Determine fv3 inputdata directory (xml variable in env_mach_specific.xml)
    ugcs_input_dir = os.environ.get("UGCSINPUTPATH")
    expect((ugcs_input_dir is not None), "You must set the UGCSINPUTPATH to your input directory location.")

    # Determine fv3 fixed files directory (xml variable in env_mach_specific.xml)
    ugcs_fixed_file_dir = os.environ.get("UGCSFIXEDFILEPATH")
    expect((ugcs_fixed_file_dir is not None), "You must set the UGCSFIXEDFILEPATH to your fixed files directory location.")

    # Determine fv3 addtional files directory (xml variable in env_mach_specific.xml)
    ugcs_addon_dir = os.environ.get("UGCSADDONPATH")
    expect((ugcs_addon_dir is not None), "You must set the UGCSADDONPATH to your grid spec and diag_table files directory location.")

    # fv3 input directory
    fv3_input_dir = ugcs_input_dir

    # maps input file -> output file
    # if output file is "", then keep same name
    fv3_input_files = {
        "aerosol.dat" : "",
        "co2historicaldata_201*.txt" : "",
        "co2historicaldata_glob.txt" : "",
        "global_o3prdlos.f77" : "",
        "sfc_emissivity_idx.txt" : "",
        "solarconstant_noaa_an.txt" : "",
        "*grb" : "",
        "*_table" : "",
        "*configure" : "",
        "INPUT/*" : "INPUT",
        "model_configure.cmeps" : "model_configure",
        "input.nml.cmeps" : "input.nml",
    }

    # additional files for run
    ugcs_input_files = {
        os.path.join(ugcs_addon_dir, atm_grid, "grid_spec.nc") : "INPUT/grid_spec.nc",
        os.path.join(ugcs_addon_dir, atm_grid, "diag_table.cmeps") : "diag_table",
    }    
    
    # create symbolic links for these dirs
    input_dirs_to_link = []

    # resolution dependent parameters (need to manage fixed files)
    if (atm_grid == 'C96'):
        res_str = "t126.384.190"
    elif (atm_grid == 'C384'):  
        res_str = "t766.1536.768"
    else:
        expect(False, "Given resolution " + atm_grid + " currently not supported!")

    # create symbolic links for these files
    input_files_to_link = {
        os.path.join(ugcs_fixed_file_dir, "global_glacier.2x2.grb") : "global_glacier.2x2.grb",
        os.path.join(ugcs_fixed_file_dir, "global_maxice.2x2.grb") : "global_maxice.2x2.grb",
        os.path.join(ugcs_fixed_file_dir, "RTGSST.1982.2012.monthly.clim.grb") : "RTGSST.1982.2012.monthly.clim.grb",
        os.path.join(ugcs_fixed_file_dir, "global_snoclim.1.875.grb") : "global_snoclim.1.875.grb",
        os.path.join(ugcs_fixed_file_dir, "global_snowfree_albedo.bosu." + res_str + ".rg.grb") : "global_snowfree_albedo.bosu." + res_str + ".rg.grb",
        os.path.join(ugcs_fixed_file_dir, "global_albedo4.1x1.grb") : "global_albedo4.1x1.grb",
        os.path.join(ugcs_fixed_file_dir, "CFSR.SEAICE.1982.2012.monthly.clim.grb") : "CFSR.SEAICE.1982.2012.monthly.clim.grb",
        os.path.join(ugcs_fixed_file_dir, "global_tg3clim.2.6x1.5.grb") : "global_tg3clim.2.6x1.5.grb",
        os.path.join(ugcs_fixed_file_dir, "global_vegfrac.0.144.decpercent.grb") : "global_vegfrac.0.144.decpercent.grb",
        os.path.join(ugcs_fixed_file_dir, "global_vegtype.igbp." + res_str + ".rg.grb") : "global_vegtype.igbp." + res_str + ".rg.grb",
        os.path.join(ugcs_fixed_file_dir, "global_soiltype.statsgo." + res_str + ".rg.grb") : "global_soiltype.statsgo." + res_str + ".rg.grb",
        os.path.join(ugcs_fixed_file_dir, "seaice_newland.grb") : "seaice_newland.grb",
        os.path.join(ugcs_fixed_file_dir, "global_shdmin.0.144x0.144.grb") : "global_shdmin.0.144x0.144.grb",
        os.path.join(ugcs_fixed_file_dir, "global_shdmax.0.144x0.144.grb") : "global_shdmax.0.144x0.144.grb",
        os.path.join(ugcs_fixed_file_dir, "global_slope.1x1.grb") : "global_slope.1x1.grb",
        os.path.join(ugcs_fixed_file_dir, "global_mxsnoalb.uariz." + res_str + ".rg.grb") : "global_mxsnoalb.uariz." + res_str + ".rg.grb"
    }
    if (atm_grid == 'C384'):
         input_files_to_link[os.path.join(ugcs_fixed_file_dir, "global_soilmgldas.statsgo." + res_str + ".grb")] = "global_soilmgldas.statsgo." + res_str + ".grb"

    # Make sure that rundir exists. If not, make it:
    if not os.path.exists(rundir):
        os.makedirs(rundir)

    # create INPUT and RESTART directories
    logger.info("\tCreating INPUT and RESTART directory")
    run_cmd("mkdir " + os.path.join(rundir, "INPUT"))
    run_cmd("mkdir " + os.path.join(rundir, "RESTART"))

    # copy template input files:
    logger.info("\tCopying input files")
    
    for input_file_name in fv3_input_files:
        input_file_path = os.path.join(fv3_input_dir, input_file_name)
        if "*" not in input_file_name and not os.path.exists(input_file_path):
            expect(False, "Couldn't find input file path: " + input_file_path)
        logger.info("cp " + input_file_path + " " + os.path.join(rundir, fv3_input_files[input_file_name]))
        run_cmd("cp " + input_file_path + " " + os.path.join(rundir, fv3_input_files[input_file_name]))

    for input_file_name in ugcs_input_files:
        input_file_path = os.path.join(ugcs_input_dir, input_file_name)
        if not os.path.exists(input_file_path):
            expect(False, "Couldn't find input file path: " + input_file_path)
        logger.info("cp " + input_file_path + " " + os.path.join(rundir, ugcs_input_files[input_file_name]))
        run_cmd("cp " + input_file_path + " " + os.path.join(rundir, ugcs_input_files[input_file_name]))

    logger.info("\tLinking input directories")
    for input_dir_name in input_dirs_to_link:
        input_dir_path = os.path.join(input_templates_dir, input_dir_name)
        if not os.path.exists(input_dir_path):
            expect(False, "Couldn't find input direcory " + input_dir_path)
        run_cmd("ln -s " + input_dir_path + " " + os.path.join(rundir, input_dir_name))

    logger.info("\tLinking input static input files")
    for input_file_name in input_files_to_link:
        if not os.path.isfile(input_file_name):
            expect(False, "Couldn't find file " + input_file_name)
        run_cmd("ln -s " + input_file_name + " " + os.path.join(rundir, input_files_to_link[input_file_name]))

    # do replacements in diag_table
    if os.path.exists(os.path.join(rundir, "diag_table")):
        with open(os.path.join(rundir,"diag_table"), 'r') as diag_table_in:
            with open(os.path.join(rundir,"diag_table.tmp"), 'w') as diag_table:
                for line in diag_table_in:
                    line = line.replace('CASENAME', casename)
                    # Use cesm style file names
                    line = line.replace("%4yr-%3dy", "%4yr-%2mo-%2dy-%5sc")
                    if testcase:
                        # this makes all real fields double precision
                        if line.endswith('2\n'):
                            line = line[:-2] + "1\n"
                            # this changes output frequency and number of records per file
                            # using HIST_N and HIST_OPTION from case
                            if line.startswith("\""+casename):
                                parts = line.split(',')
                                if len(parts) > 7:
                                    parts[1] = "1"
                                    parts[2] = "days"
                                    parts[6] = parts[1]
                                    parts[7] = parts[2]
                                    line = ','.join(parts)+"\n"
                    diag_table.writelines(line)
        os.rename(os.path.join(rundir,"diag_table.tmp"), os.path.join(rundir,"diag_table"))


def buildnml(case, caseroot, compname):

    # Build the component namelist
    if compname != "fv3gfs":
        raise AttributeError

    prep_input(case)

    return

###############################################################################
def _main_func():

    caseroot = parse_input(sys.argv)
    with Case(caseroot) as case:
        buildnml(case, caseroot, "fv3gfs")

if __name__ == "__main__":
    _main_func()
