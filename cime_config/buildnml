#!/usr/bin/env python

"""FV3GFS namelist creator
"""

# Typically ignore this.
# pylint: disable=invalid-name

# Disable these because this is our standard setup
# pylint: disable=wildcard-import,unused-wildcard-import,wrong-import-position

import os, shutil, sys, glob, stat, filecmp, imp, re, time
from decimal import Decimal

CIMEROOT = os.environ.get("CIMEROOT")
if CIMEROOT is None:
    raise SystemExit("ERROR: must set CIMEROOT environment variable")
sys.path.append(os.path.join(CIMEROOT, "scripts", "Tools"))

from standard_script_setup import *
from CIME.case import Case
from CIME.nmlgen import NamelistGenerator
from CIME.utils import expect, get_model
from CIME.buildnml import create_namelist_infile, parse_input
from CIME.utils import run_cmd, safe_copy, symlink_force

logger = logging.getLogger(__name__)

# find factors of a number
def factors(n):
    return set(x for tup in ([i, n//i] for i in range(1, int(n**0.5)+1) if n % i == 0) for x in tup)

# check if all elements in a list are same
def checkList(lst):
    ele = lst[0]
    chk = True
    # Comparing each element with first item
    for item in lst:
        if ele != item:
            chk = False
            break;
    return chk

# prepares the input files of a case and places in rundir:
def prep_input(case, datestamp, nmlgen, nmlgen_model):
    casename        = case.get_value("CASE")
    Buildconf       = case.get_value("CASEBUILD")
    rundir          = case.get_value("RUNDIR")
    atm_grid        = case.get_value("ATM_GRID")
    testcase        = case.get_value("TEST")
    din_loc_root = case.get_value("DIN_LOC_ROOT")
    ccpp = case.get_value("BUILD_CCPP")

    #----------------------------------------------------
    # Create list of input files
    #----------------------------------------------------

    # TODO: make it xmlchnage variable
    new_o3forc = True

    # Define base directories
    dir_fix_am  = os.path.join(din_loc_root,"global","fix","fix_am.v{}".format(datestamp))
    dir_fix_fv3 = os.path.join(din_loc_root,"global","fix","fix_fv3_gmted2010.v{}".format(datestamp),atm_grid)
    dir_rt_fv3 = os.path.join(din_loc_root,"RT","fv3_gfdlmprad")

    # Create generic dictionary to hold input files: [source_file, "ln" | "cp", target_file]
    input_files = dict()

    # Grid and orography data
    for tile in xrange(1,7):
        input_files["grid_tile{}".format(tile)] = [os.path.join(dir_fix_fv3,atm_grid+"_grid.tile{}.nc".format(tile)), "ln", os.path.join("INPUT",atm_grid+"_grid.tile{}.nc".format(tile))]
        input_files["orog_data{}".format(tile)] = [os.path.join(dir_fix_fv3,atm_grid+"_oro_data.tile{}.nc".format(tile)), "ln", os.path.join("INPUT","oro_data.tile{}.nc".format(tile))]
    input_files["grid_mosaic"] = [os.path.join(dir_fix_fv3,atm_grid+"_mosaic.nc"), "ln", os.path.join("INPUT","grid_spec.nc")]

    # GFS standard input files
    iaer = nmlgen.get_value('iaer')
    ico2 = nmlgen.get_value('ico2')

    if new_o3forc:
        input_files["o3forc"] = [os.path.join(dir_fix_am,"ozprdlos_2015_new_sbuvO3_tclm15_nuchem.f77"), "ln", "global_o3prdlos.f77"]
    else:
        input_files["o3forc"] = [os.path.join(dir_fix_am,"global_o3prdlos.f77"), "ln", "global_o3prdlos.f77"]

    input_files["h2oforc"] = [os.path.join(dir_fix_am,"global_h2o_pltc.f77"), "ln", "global_h2oprdlos.f77"]
    input_files["solcnst"] = [os.path.join(dir_fix_am,"global_solarconstant_noaa_an.txt"), "ln", "solarconstant_noaa_an.txt"]
    input_files["sfcemis"] = [os.path.join(dir_fix_am,"global_sfc_emissivity_idx.txt"), "ln", "sfc_emissivity_idx.txt"]
    input_files["co2hist"] = [os.path.join(dir_fix_am,"global_co2historicaldata_glob.txt"), "ln", "co2historicaldata_glob.txt"]
    input_files["co2mont"] = [os.path.join(dir_fix_am,"co2monthlycyc.txt"), "ln", "co2monthlycyc.txt"]

    if int(ico2) > 0:
        yy = int(time.strftime("%Y,%m,%d,%H,%M,%S").split(',')[0])
        for year in xrange(2009,yy+1):
            input_files["co2his_{}".format(year)] = [os.path.join(dir_fix_am,"fix_co2_proj","global_co2historicaldata_{}.txt".format(year)), "ln", "co2historicaldata_{}.txt".format(year)]

    input_files["clmaero"] = [os.path.join(dir_fix_am,"global_climaeropac_global.txt"), "ln", "aerosol.dat"]
    
    if int(iaer) > 0:
        for year in xrange(1850,2000,10):
            input_files["volaer_{}".format(year)] = [os.path.join(dir_fix_am,"global_volcanic_aerosols_{}-{}.txt".format(year,year+9)), "ln", "volcanic_aerosols_{}-{}.txt".format(year,year+9)]

    # TODO: need to have those files
    # Inline post fix files
    #write_dopost = nmlgen_model.get_value('write_dopost')
    #if '.true.' in write_dopost:
    #    input_files["
    #input_case_files["grib2_tbl"] =  os.path.join(din_loc_root,"RT","fv3_gfdlmprad","params_grib2_tbl_new")
    #input_case_files["post_conf"] =  os.path.join(din_loc_root,"RT","fv3_gfdlmprad","postxconfig-NT.txt")

    # Fixed files
    for var in nmlgen.get_group_variables('namsfc'):
        var_type,_,_ = nmlgen._definition.split_type_string(var)
        var_str = str(nmlgen.get_value(var)).strip()
        if 'character' in var_type and var_str and 'igbp' not in var_str[0:4]:
            input_files[var] = [var_str, "none", ""]

    # Table files
    input_files["data_tbl"] = [os.path.join(dir_rt_fv3,"data_table"), "cp", "data_table"]
    input_files["diag_tbl"] = [os.path.join(dir_rt_fv3,"diag_table"), "cp", "diag_table"]
    input_files["field_tbl"] = [os.path.join(dir_rt_fv3,"field_table"), "cp", "field_table"]

    # Configuration file 
    input_files["nems_conf"] = [os.path.join(dir_rt_fv3,"nems.configure"), "cp", "nems.configure"]

    # Initial conditions 
    input_files["gfs_ctrl"] = [os.path.join(dir_rt_fv3,"INPUT","gfs_ctrl.nc"), "ln", os.path.join("INPUT","gfs_ctrl.nc")]
    for tile in xrange(1,7):
        input_files["sfc_data.tile{}".format(tile)] = [os.path.join(dir_rt_fv3,"INPUT","sfc_data.tile{}.nc".format(tile)), "ln", os.path.join("INPUT","sfc_data.tile{}.nc".format(tile))]
        input_files["gfs_data.tile{}".format(tile)] = [os.path.join(dir_rt_fv3,"INPUT","gfs_data.tile{}.nc".format(tile)), "ln", os.path.join("INPUT","gfs_data.tile{}.nc".format(tile))]

    # Write input file list
    with open(os.path.join(Buildconf,"fv3.input_data_list"), 'w') as input_data_list:
        for k,v in input_files.items():
            input_data_list.write(k+" = "+v[0]+"\n")

    # Make sure that rundir exists. If not, make it:
    if not os.path.exists(rundir):
        os.makedirs(rundir)

    # Create INPUT and RESTART directories
    logger.info("\tCreating INPUT and RESTART directory")
    run_cmd("mkdir " + os.path.join(rundir, "INPUT"))
    run_cmd("mkdir " + os.path.join(rundir, "RESTART"))

    # Copy/Link files
    for k,v in input_files.items():
        if "ln" in v[1]:
            symlink_force(v[0], os.path.join(rundir,v[2]))
        elif "cp" in v[1]:
            safe_copy(v[0], os.path.join(rundir,v[2]))

    # Do replacements in diag_table
    # TODO: This is not working properly
    #if os.path.exists(os.path.join(rundir, "diag_table")):
    #    with open(os.path.join(rundir,"diag_table"), 'r') as diag_table_in:
    #        with open(os.path.join(rundir,"diag_table.tmp"), 'w') as diag_table:
    #            for line in diag_table_in:
    #                line = line.replace('CASENAME', casename)
    #                # Use cesm style file names
    #                line = line.replace("%4yr-%3dy", "%4yr-%2mo-%2dy-%5sc")
    #                if testcase:
    #                    # this makes all real fields double precision
    #                    if line.endswith('2\n'):
    #                        line = line[:-2] + "1\n"
    #                        # this changes output frequency and number of records per file
    #                        # using HIST_N and HIST_OPTION from case
    #                        if line.startswith("\""+casename):
    #                            parts = line.split(',')
    #                            if len(parts) > 7:
    #                                parts[1] = "1"
    #                                parts[2] = "days"
    #                                parts[6] = parts[1]
    #                                parts[7] = parts[2]
    #                                line = ','.join(parts)+"\n"
    #                diag_table.writelines(line)
    #    os.rename(os.path.join(rundir,"diag_table.tmp"), os.path.join(rundir,"diag_table"))

# pylint: disable=too-many-arguments,too-many-locals,too-many-branches,too-many-statements
####################################################################################
def _create_namelist_input(case, confdir, config, infile, nmlgen1, nmlgen2, nmlgen3, datestamp):
####################################################################################
    """Write out the namelist for this component.

    Most arguments are the same as those for `NamelistGenerator`.
    The `confdir` argument is used to specify the directory  in which output files will be placed.
    """
    #----------------------------------------------------
    # Clear out old data.
    #----------------------------------------------------
    data_list_path = os.path.join(case.get_case_root(), "Buildconf", "fv3.input_data_list")

    #----------------------------------------------------
    # Initialize namelist defaults
    #----------------------------------------------------

    nmlgen2.init_defaults(infile, config)

    #----------------------------------------------------
    # Modify namelist defaults
    #----------------------------------------------------

    # modify layout namelist option to be consistent with given number of task
    atm_grid = case.get_value("ATM_GRID")
    ntask_atm = int(case.get_value('NTASKS_ATM'))
    ntask_write = int(nmlgen1.get_value('write_tasks_per_group'))
    n_write_groups = int(nmlgen1.get_value('write_groups'))
    ntiles = int(nmlgen2.get_value('ntiles'))

    if ((ntask_atm-ntask_write)%ntiles != 0):
        expect(False, "(ntask_atm-write_tasks_per_group*write_groups)%%ntiles must equal to 0! (%d-%d)/%d = %d" %
             (ntask_atm,ntask_write,ntiles,(ntask_atm-(ntask_write*n_write_groups))%ntiles))
    else:
        # get default value
        layout = nmlgen2.get_value('layout')
        layout_x = int(layout[0])
        layout_y = int(layout[1])

        # check consitency of layout, number of io task etc. and try to fix it if it is required
        if (((layout_x*layout_y)*ntiles+(ntask_write*n_write_groups)) != ntask_atm):
            logger.info("\tWARNING: (layout(1)*layout(2)*ntiles+write_tasks_per_group*write_groups) must equal to %d but it is %d!" %
                (ntask_atm,(layout_x*layout_y)*ntiles+(ntask_write*n_write_groups)))

            # calculate total number of task
            ntask = (ntask_atm-(ntask_write*n_write_groups))/ntiles

            # calculate dividers
            fact1 = sorted(list(factors(ntask)))
            fact2 = [ntask/i for i in fact1]

            # get differencies
            res = [abs(x1 - x2) for (x1, x2) in zip(fact1, fact2)]

            # check values and set it to 999 if it is re
            for i in xrange(len(res)):
                atm_grid_int = int(atm_grid.replace('C',''))
                if atm_grid_int%fact1[i] != 0 or atm_grid_int%fact2[i] != 0:
                    res[i] = 999

            # check there is a suitable option for layout or not?
            if (checkList(res) and res[0] == 999):
                logger.info("\tYou must provide a resonable layout pair! Exiting ...")
                logger.info("\tThe resolution (" + atm_grid[1:] + ") need to be divided evenly with layouts.")
                logger.info("\tTo fix the issue:")
                logger.info("\t   (1) the total number of PEs assigned to ATM component")
                logger.info("\t   (2) write_tasks_per_group (in user_nl_fv3gfs)")
                logger.info("\tcan be modified.")

            # find indices of smallest diff
            i = res.index(min(res))

            # set layout
            nmlgen2.set_value('layout', value=[fact1[i],fact2[i],])

            # print out new factors
            logger.info("\tUsing automatically generated layout configuration %s x %s" % (fact1[i], fact2[i]))

    # Define base directory
    din_loc_root = case.get_value("DIN_LOC_ROOT")
    dir_fix_am  = os.path.join(din_loc_root,"global","fix","fix_am.v{}".format(datestamp))

    # Spectral truncation and regular grid resolution based on FV3 resolution   
    res = int(atm_grid.replace('C',''))
    jcap = 2*res-2
    lonb = 4*res
    latb = 2*res

    # Fix files, changes based on the selected resolution
    nmlgen2.set_value('fnglac', value=os.path.join(dir_fix_am,"global_glacier.2x2.grb"))
    nmlgen2.set_value('fnmxic', value=os.path.join(dir_fix_am,"global_maxice.2x2.grb"))
    nmlgen2.set_value('fntsfc', value=os.path.join(dir_fix_am,"RTGSST.1982.2012.monthly.clim.grb"))
    nmlgen2.set_value('fnsnoc', value=os.path.join(dir_fix_am,"global_snoclim.1.875.grb"))
    nmlgen2.set_value('fnzorc', value="igbp")
    nmlgen2.set_value('fnalbc2', value=os.path.join(dir_fix_am,"global_albedo4.1x1.grb"))
    nmlgen2.set_value('fnaisc', value=os.path.join(dir_fix_am,"CFSR.SEAICE.1982.2012.monthly.clim.grb"))
    nmlgen2.set_value('fntg3c', value=os.path.join(dir_fix_am,"global_tg3clim.2.6x1.5.grb"))
    nmlgen2.set_value('fnvegc', value=os.path.join(dir_fix_am,"global_vegfrac.0.144.decpercent.grb"))
    nmlgen2.set_value('fnmskh', value=os.path.join(dir_fix_am,"global_slmask.t1534.3072.1536.grb"))
    nmlgen2.set_value('fnvmnc', value=os.path.join(dir_fix_am,"global_shdmin.0.144x0.144.grb"))
    nmlgen2.set_value('fnvmxc', value=os.path.join(dir_fix_am,"global_shdmax.0.144x0.144.grb"))
    nmlgen2.set_value('fnslpc', value=os.path.join(dir_fix_am,"global_slope.1x1.grb"))
    nmlgen2.set_value('fnalbc', value=os.path.join(dir_fix_am,"global_snowfree_albedo.bosu.t{}.{}.{}.rg.grb".format(jcap,lonb,latb)))
    nmlgen2.set_value('fnvetc', value=os.path.join(dir_fix_am,"global_vegtype.igbp.t{}.{}.{}.rg.grb".format(jcap,lonb,latb)))
    nmlgen2.set_value('fnsotc', value=os.path.join(dir_fix_am,"global_soiltype.statsgo.t{}.{}.{}.rg.grb".format(jcap,lonb,latb)))
    nmlgen2.set_value('fnabsc', value=os.path.join(dir_fix_am,"global_mxsnoalb.uariz.t{}.{}.{}.rg.grb".format(jcap,lonb,latb)))

    # If the appropriate resolution fix file is not present, use the highest resolution available (T1534)
    if res == 96 or res == 192:
        jcap = 1534
        lonb = 3072
        latb = 1536
        nmlgen2.set_value('fnsmcc', value=os.path.join(dir_fix_am,"global_soilmgldas.statsgo.t{}.{}.{}.grb".format(jcap,lonb,latb)))
    else:
        nmlgen2.set_value('fnsmcc', value=os.path.join(dir_fix_am,"global_soilmgldas.statsgo.t{}.{}.{}.grb".format(jcap,lonb,latb)))

    #----------------------------------------------------
    # Write out namelist groups
    #----------------------------------------------------

    # path for namelist files
    srcroot = case.get_value("SRCROOT")
    namelist_xml_dir = os.path.join(srcroot, "src", "model", "FV3", "cime", "cime_config")

    # create list of groups by querying xml file
    groups = []
    with open(os.path.join(namelist_xml_dir, "namelist_definition_fv3.xml"), 'r') as fin:
        for s in fin.xreadlines():
            if "<group>" in s:
                groups.append(s.replace('<group>', '').replace('</group>', '').strip())

    # remove duplicates
    groups = list(set(groups))

    # keep only fv3gfs related ones
    groups.remove('config') # chgres
    groups.remove('_no_group_var') # model_configure
    groups.remove('freeform') # ncep_post
    groups.remove('nampgb') # ncep_post

    # sort group
    groups.sort()

    # remove namelist options that has no specialization
    config_defaults = {}
    nmlgen3.init_defaults(infile, config_defaults)

    for nml in nmlgen2._namelist.get_group_names():
        for var in nmlgen2.get_group_variables(nml):
             matched = False
             var_type, _, var_size, =  nmlgen2._definition.split_type_string(var)

             # if it is list and size is different from var_size
             if var_size > 1:
                # create empty list
                var_act = [None]*var_size
                var_def = [None]*var_size

                # force to have same lenght
                var_act_len = len(nmlgen2.get_value(var))
                var_act[0:var_act_len] = [x for x in nmlgen2.get_value(var)]
                var_def_len = len(nmlgen3.get_value(var))
                var_def[0:var_def_len] = [x for x in nmlgen3.get_value(var)]

                # compare
                if var_type == 'character' or var_type == 'logical':
                    var_act = ['xyz' if x is None else x.lower() for x in var_act]
                    var_def = ['xyz' if x is None else x.lower() for x in var_def]
                    matched = all(y.startswith(x) for x,y in zip(var_act,var_def))
                elif var_type == 'integer':
                    var_act = [-99 if x is None else int(x) for x in var_act]
                    var_def = [-99 if x is None else int(x) for x in var_def]
                    matched = all(x == y for x,y in zip(var_act,var_def))
                elif var_type == 'real':
                    var_act = [-99.9 if x is None else float(eval(x.lower().replace('d','e'))) for x in var_act]
                    var_def = [-99.9 if x is None else float(eval(x.lower().replace('d','e'))) for x in var_def]
                    matched = all(x == y for x,y in zip(var_act,var_def))
             else:
                 if var_type == 'character' or var_type == 'logical':
                     if nmlgen2.get_value(var).startswith(nmlgen3.get_value(var)):
                         matched = True
                 elif var_type == 'integer':
                     if int(nmlgen3.get_value(var)) == int(nmlgen2.get_value(var)):
                         matched = True
                 elif var_type == 'real':
                     if float(eval(nmlgen3.get_value(var).lower().replace('d','e'))) == \
                        float(eval(nmlgen2.get_value(var).lower().replace('d','e'))):
                         matched = True

             # if there is a match, remove it from the list
             if matched:
                 nmlgen2._namelist.delete_variable(nml, var)

    # create namelist
    namelist_file = os.path.join(confdir, "atm_in")
    nmlgen2.write_output_file(namelist_file, data_list_path, groups=groups, sorted_groups=False)

# pylint: disable=too-many-arguments,too-many-locals,too-many-branches,too-many-statements
####################################################################################
def _create_namelist_model_configure(case, confdir, config, infile, nmlgen):
####################################################################################
    """Write out the namelist for this component.

    Most arguments are the same as those for `NamelistGenerator`.
    The `confdir` argument is used to specify the directory  in which output files will be placed.
    """
    #----------------------------------------------------
    # Clear out old data.
    #----------------------------------------------------
    data_list_path = os.path.join(case.get_case_root(), "Buildconf", "fv3.input_data_list")
    if os.path.exists(data_list_path):
        os.remove(data_list_path)

    #----------------------------------------------------
    # Initialize namelist defaults
    #----------------------------------------------------
    nmlgen.init_defaults(infile, config)

    #----------------------------------------------------
    # Modify namelist defaults
    #----------------------------------------------------

    # modify start date
    run_start_date = case.get_value('RUN_STARTDATE').split('-')
    yyyy = int(run_start_date[0])
    mm = int(run_start_date[1])
    dd = int(run_start_date[2])
    nmlgen.set_value('start_year', value=yyyy)
    nmlgen.set_value('start_month', value=mm)
    nmlgen.set_value('start_day', value=dd)

    run_start_tod = case.get_value('START_TOD')
    hh = int(run_start_tod//3600)
    mi = int((run_start_tod-hh*3600)//60)
    ss = int(run_start_tod-hh*3600-mi*60)
    nmlgen.set_value('start_hour', value=hh)
    nmlgen.set_value('start_minute', value=mi)
    nmlgen.set_value('start_second', value=ss)

    # modify forecast lenght
    stop_option = case.get_value('STOP_OPTION')
    stop_n = int(case.get_value('STOP_N'))
    if 'nyears' in stop_option:
        expect(False, "Need to implement support for 'nyears'")
    elif 'nmonths' in stop_option:
        expect(False, "Need to implement support for 'nmonths'")
    elif 'ndays' in stop_option:
        nmlgen.set_value('nhours_fcst', value=stop_n*24)
    elif 'nhours' in stop_option:
        nmlgen.set_value('nhours_fcst', value=stop_n)
    elif 'nseconds' in stop_option:
        nmlgen.set_value('nhours_fcst', value=stop_n/60)
    elif 'nsteps' in stop_option:
        expect(False, "Need to implement support for 'nsteps'")

    # TODO: need to modify following?
    #atmos_nthreads
    #ncores_per_node 

    #----------------------------------------------------
    # Write out model.configure namelist
    #----------------------------------------------------
    model_config_file = os.path.join(confdir, "model_configure")
    nmlgen.write_nuopc_config_file(model_config_file, data_list_path)

# pylint: disable=too-many-arguments,too-many-locals,too-many-branches,too-many-statements
####################################################################################
def _create_namelist_chgres(case, confdir, config, infile, nmlgen):
####################################################################################
    """Write out the namelist for this component.

    Most arguments are the same as those for `NamelistGenerator`.
    The `confdir` argument is used to specify the directory  in which output files will be placed.
    """
    #----------------------------------------------------
    # Clear out old data.
    #----------------------------------------------------
    data_list_path = os.path.join(case.get_case_root(), "Buildconf", "fv3.input_data_list")

    #----------------------------------------------------
    # Initialize namelist defaults
    #----------------------------------------------------
    nmlgen.init_defaults(infile, config)

    #----------------------------------------------------
    # Write out namelist groups
    #----------------------------------------------------
    groups=['config']

    namelist_file = os.path.join(confdir, "config.nml")
    nmlgen.write_output_file(namelist_file, data_list_path, groups=groups, sorted_groups=False)

# pylint: disable=too-many-arguments,too-many-locals,too-many-branches,too-many-statements
####################################################################################
def _create_namelist_ncep_post(case, confdir, config, infile, nmlgen):
####################################################################################
    """Write out the namelist for this component.

    Most arguments are the same as those for `NamelistGenerator`.
    The `confdir` argument is used to specify the directory  in which output files will be placed.
    """
    #----------------------------------------------------
    # Clear out old data.
    #----------------------------------------------------
    data_list_path = os.path.join(case.get_case_root(), "Buildconf", "fv3.input_data_list")

    #----------------------------------------------------
    # Initialize namelist defaults
    #----------------------------------------------------
    nmlgen.init_defaults(infile, config)

    #----------------------------------------------------
    # Write out namelist groups
    #----------------------------------------------------
    groups=['nampgb']

    run_start_date = case.get_value('RUN_STARTDATE').split('-')
    yy = int(run_start_date[0])
    mm = int(run_start_date[1])
    dd = int(run_start_date[2])

    run_start_tod = case.get_value('START_TOD')

    cycle_lst = [12, 24, 36]
    for i in cycle_lst:
        namelist_file = os.path.join(confdir, "itaga.%03d" % (i))
        nmlgen.write_output_file(namelist_file, data_list_path, groups=groups, sorted_groups=False)

        dd_mod = dd
        irest = i
        if i/24 > 0:
            dd_mod = dd+i/24
            irest = i%24

        run_start_tod_new = run_start_tod+irest*3600
        hh = int(run_start_tod_new//3600)
        mi = int((run_start_tod_new-hh*3600)//60)
        ss = int(run_start_tod_new-hh*3600-mi*60)

        with open(namelist_file, 'r+') as f:
            content = f.read()
            f.seek(0,0)
            f.write(nmlgen.get_value('filename')+"\n")
            f.write(nmlgen.get_value('ioform')+"\n")
            f.write(nmlgen.get_value('outform')+"\n")
            f.write("%04d-%02d-%02d_%02d:%02d:%02d\n"%(yy, mm, dd_mod, hh, mi, ss))
            f.write(nmlgen.get_value('modelname')+"\n")
            f.write(nmlgen.get_value('filenameflux')+"\n")
            f.write(content)

###############################################################################
def buildnml(case, caseroot, compname):
###############################################################################

    # Date stamp for input directory.
    # TODO: might be a xmlchange option 
    datestamp="20191213"

    # Build the component namelist
    if compname != "fv3gfs":
        raise AttributeError
    srcroot = case.get_value("SRCROOT")
    rundir  = case.get_value("RUNDIR")

    # determine the confdir directory
    confdir = os.path.join(caseroot,"Buildconf","fv3gfsconf")
    if not os.path.isdir(confdir):
        os.makedirs(confdir)

    # create config dictionary
    compset = case.get_value("COMPSET")
    if "SLND_SICE_SOCN_SROF_SGLC_SWAV_SESP" in compset:
        app = "mrweather"
    else:
        app = "s2s"

    ccpp_suite = case.get_value("CCPP_SUITES").replace("FV3_GFS_", "")

    config = {}
    config['app'] = app
    config['ccpp'] = ccpp_suite
    config['hgrid'] = case.get_value("ATM_GRID")

    # path for namelist files
    namelist_xml_dir = os.path.join(srcroot, "src", "model", "FV3", "cime", "cime_config")

    #----------------------------------------------------
    # Namelist generator for chgres
    #----------------------------------------------------

    # set namelist definition file
    definition_file = [os.path.join(namelist_xml_dir, "namelist_definition_fv3.xml")]

    # create the namelist generator object
    nmlgen_chgres = NamelistGenerator(case, definition_file)

    # create namelist_infile using user_nl_file as input
    user_nl_file = os.path.join(caseroot, "user_nl_fv3gfs")
    expect(os.path.isfile(user_nl_file),
           "Missing required user_nl_file %s " %(user_nl_file))
    infile = os.path.join(confdir, "namelist_infile")
    create_namelist_infile(case, user_nl_file, infile)
    namelist_infile = [infile]

    # create namelist config.nml
    _create_namelist_chgres(case, confdir, config, namelist_infile, nmlgen_chgres)

    # copy namelist to rundir
    if os.path.isdir(rundir):
        file1 = os.path.join(confdir, "config.nml")
        file2 = os.path.join(rundir, "config.nml")
        logger.debug("CHGRES configuration copy: file1 %s file2 %s " %(file1, file2))
        shutil.copy2(file1, file2)

    #----------------------------------------------------
    # Namelist generator for fv3 (model_configure)
    #----------------------------------------------------

    # create the namelist generator object
    nmlgen_model_configure = NamelistGenerator(case, definition_file)

    # create namelist model_configure
    _create_namelist_model_configure(case, confdir, config, namelist_infile, nmlgen_model_configure)

    # copy namelist files to rundir
    if os.path.isdir(rundir):
        file1 = os.path.join(confdir, "model_configure")
        file2 = os.path.join(rundir, "model_configure")
        logger.debug("FV3GFS configuration copy: file1 %s file2 %s " %(file1, file2))
        shutil.copy2(file1, file2)

    #----------------------------------------------------
    # Namelist generator for fv3 (input.nml)
    #----------------------------------------------------

    # create the namelist generator object
    nmlgen_input = NamelistGenerator(case, definition_file)

    # create copy of nmlgen_input to modify
    nmlgen_input_duplicated = NamelistGenerator(case, definition_file)

    # create namelist input.nml
    _create_namelist_input(case, confdir, config, namelist_infile, nmlgen_model_configure, nmlgen_input, nmlgen_input_duplicated, datestamp)

    # copy namelist files to rundir
    if os.path.isdir(rundir):
        file1 = os.path.join(confdir, "atm_in")
        file2 = os.path.join(rundir, "atm_in")
        logger.debug("FV3 namelist copy: file1 %s file2 %s " %(file1, file2))
        shutil.copy2(file1, file2)

    # link file
    logger.info("\tLinking input namelist for FV3GFS")
    if not os.path.exists(rundir):
        expect(False, "Couldn't find run direcory " + rundir)
    run_cmd("ln -sf " + file2 + " " + os.path.join(rundir, "input.nml"))

    #----------------------------------------------------
    # Namelist generator for ncep_post
    #----------------------------------------------------

    # create the namelist generator object
    nmlgen_ncep_post = NamelistGenerator(case, definition_file)

    # remove old configuration files
    for f in os.listdir(confdir):
        if "itaga" in f:
            os.remove(os.path.join(confdir,f))

    # create namelist model_configure
    _create_namelist_ncep_post(case, confdir, config, namelist_infile, nmlgen_ncep_post)

    # copy namelist to rundir
    if os.path.isdir(rundir):
        for f in os.listdir(confdir):
            if "itaga" in f:
                file1 = os.path.join(confdir, f)
                file2 = os.path.join(rundir, f)
                logger.debug("NCEP_POST configuration copy: file1 %s file2 %s " %(file1, file2))
                shutil.copy2(file1, file2)

    #----------------------------------------------------
    # Copy/link input files
    #----------------------------------------------------

    prep_input(case, datestamp, nmlgen_input, nmlgen_model_configure)

    return

###############################################################################
def _main_func():

    caseroot = parse_input(sys.argv)
    with Case(caseroot) as case:
        buildnml(case, caseroot, "fv3gfs")

if __name__ == "__main__":
    _main_func()
